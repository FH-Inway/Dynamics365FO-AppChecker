//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SocratexGraphExplorer.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.7.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("neo4j")]
        public string Username {
            get {
                return ((string)(this["Username"]));
            }
            set {
                this["Username"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("12")]
        public int QueryFontSize {
            get {
                return ((int)(this["QueryFontSize"]));
            }
            set {
                this["QueryFontSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Consolas")]
        public string QueryFont {
            get {
                return ((string)(this["QueryFont"]));
            }
            set {
                this["QueryFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("7687")]
        public int Port {
            get {
                return ((int)(this["Port"]));
            }
            set {
                this["Port"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("localhost")]
        public string Server {
            get {
                return ((string)(this["Server"]));
            }
            set {
                this["Server"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Socratex Graph Explorer")]
        public string AppTitle {
            get {
                return ((string)(this["AppTitle"]));
            }
            set {
                this["AppTitle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ConnectResultNodes {
            get {
                return ((bool)(this["ConnectResultNodes"]));
            }
            set {
                this["ConnectResultNodes"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<html>\r\n    <head>\r\n       <style type=\'text/css\'>\r\n            #viz {\r\n         " +
            "       width: 750px;\r\n                height: 600px;\r\n                border: 1p" +
            "x solid lightgray;\r\n                font: 12pt arial;\r\n                backgroun" +
            "d: white;\r\n                margin-top: -8px;\r\n                margin-bottom: +8p" +
            "x;\r\n                margin-left: -8px;\r\n                margin-right: +8px;\r\n   " +
            "         }\r\n        </style>\r\n        <script src=\'https://rawgit.com/neo4j-cont" +
            "rib/neovis.js/master/dist/neovis.js\'></script>\r\n    </head>\r\n    <script>\r\n\r\n   " +
            "     function printGraph()\r\n        { \r\n            window.print(); \r\n         }" +
            "\r\n\r\n        function setVizSize(width, height)\r\n        {\r\n            document." +
            "getElementById(\'viz\').style.width = width + \'px\';\r\n            document.getEleme" +
            "ntById(\'viz\').style.height = height + \'px\';\r\n        }\r\n\r\n        function NodeO" +
            "rEdgeSelected(event) {\r\n            window.chrome.webview.postMessage({\'node\': e" +
            "vent.nodes[0], \'edge\': event.edges[0]});\r\n        }\r\n\r\n        function draw(cyp" +
            "her) {\r\n            var config = {\r\n                container_id: \'viz\',\r\n      " +
            "          server_url: \'bolt://localhost:7687\',\r\n                server_user: \'ne" +
            "o4j\',\r\n                server_password: \'test\',\r\n                arrows: true, /" +
            "/ Shows arrows on edges\r\n                labels: {\r\n                    \'Class\':" +
            " {\r\n                        caption: \'Name\', // Works. Name of property on Class" +
            " node\r\n                        size: \'LOC\' ,\r\n                        // communi" +
            "ty: 1,\r\n\r\n                        // This is what gets shown in the tooltip\r\n   " +
            "                     \'title_properties\': [\r\n                            \'Name\', " +
            "\'LOC\'\r\n                        ],\r\n                    },\r\n                    \'" +
            "Table\': {\r\n                        caption: \'Name\', \r\n                        si" +
            "ze: \'LOC\' ,\r\n                        // community: 2,\r\n\r\n                       " +
            " // This is what gets shown in the tooltip\r\n                        \'title_prope" +
            "rties\': [\r\n                            \'Name\', \'LOC\'\r\n                        ]," +
            "\r\n                    },\r\n                    \'Form\': {\r\n                       " +
            " caption: \'Name\', \r\n                        size: \'LOC\' ,\r\n                     " +
            "  //  community: 3,\r\n\r\n                        // This is what gets shown in the" +
            " tooltip\r\n                        \'title_properties\': [\r\n                       " +
            "     \'Name\', \'LOC\'\r\n                        ],\r\n                    },          " +
            "          \r\n                    \'Method\': {\r\n                        // This is " +
            "what gets shown in the tooltip\r\n                        \'title_properties\': [\r\n " +
            "                           \'Method\', \'LOC\', \'NOS\'\r\n                        ],\r\n " +
            "                       caption: \'Name\', // Works. Name of property on Method nod" +
            "e\r\n                        size: \'LOC\',\r\n                        // community: 4" +
            ",\r\n                    }\r\n                },\r\n                relationships: {\r\n" +
            "                    \'EXTENDS\': {\r\n                        caption: true,  // Wor" +
            "ks\r\n                    },\r\n                    \'DECLARES\': {\r\n                 " +
            "       caption: true,  // Works\r\n                    },\r\n                    \'CA" +
            "LLS\': {\r\n                        \'title_properties\': [\r\n                        " +
            "    \'Count\'\r\n                        ],\r\n                        caption: true, " +
            " \r\n                        thickness: \'Count\', // Need a property name on the ed" +
            "ge\r\n\r\n                    }\r\n                },\r\n                initial_cypher:" +
            " cypher\r\n            }\r\n\r\n            var viz = new NeoVis.default(config);\r\n   " +
            "         viz.registerOnEvent(\'completed\', (e)=>\r\n            {\r\n                " +
            "viz[\'_network\'].on(\'click\', (event)=>\r\n                {\r\n                    No" +
            "deOrEdgeSelected(event);\r\n                    console.log(event.nodes[0]);\r\n    " +
            "            });\r\n            });\r\n\r\n            // Do the actual drawing\r\n      " +
            "      viz.render();\r\n        }\r\n    </script>\r\n\r\n    <body >\r\n        <div id=\'v" +
            "iz\'></div>\r\n    </body>\r\n</html>")]
        public string Configuration {
            get {
                return ((string)(this["Configuration"]));
            }
            set {
                this["Configuration"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("12")]
        public int SourceFontSize {
            get {
                return ((int)(this["SourceFontSize"]));
            }
            set {
                this["SourceFontSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Consolas")]
        public string SourceFont {
            get {
                return ((string)(this["SourceFont"]));
            }
            set {
                this["SourceFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("12")]
        public int TextResultsFontSize {
            get {
                return ((int)(this["TextResultsFontSize"]));
            }
            set {
                this["TextResultsFontSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ShowLineNumbers {
            get {
                return ((bool)(this["ShowLineNumbers"]));
            }
            set {
                this["ShowLineNumbers"] = value;
            }
        }
    }
}
